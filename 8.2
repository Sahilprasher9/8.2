// jwt_protected_routes.js
import express from "express";
import jwt from "jsonwebtoken";
import bodyParser from "body-parser";

const app = express();
app.use(bodyParser.json());

const SECRET_KEY = "mysecretkey";

// Sample hardcoded user
const user = {
  username: "admin",
  password: "12345",
};

// Login route — issues JWT if credentials match
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  if (username === user.username && password === user.password) {
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: "1h" });
    res.json({ message: "Login successful", token });
  } else {
    res.status(401).json({ message: "Invalid username or password" });
  }
});

// Middleware to verify JWT
function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Token missing or invalid format" });
  }

  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    req.user = decoded;
    next();
  } catch {
    return res.status(403).json({ message: "Invalid or expired token" });
  }
}

// Protected route — only accessible with valid JWT
app.get("/protected", verifyToken, (req, res) => {
  res.json({ message: `Welcome ${req.user.username}, you accessed a protected route!` });
});

// Public route — accessible without authentication
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the public API route!" });
});

app.listen(5000, () => console.log("Server running on http://localhost:5000"));
